server:
  port: 8080

spring:
  main:
    web-application-type: reactive
  application:
    name: api-gateway
  cloud:
    gateway:
      routes:
        - id: auth-service
          uri:  lb://auth-service
          predicates:
            - Path=/api/auth/**
          filters:
            - StripPrefix=1
            
         # Nova rota para property-service
        - id: property-service
          uri: lb://property-service
          predicates:
            - Path=/api/properties/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: propertyCircuitBreaker
                fallbackUri: forward:/fallback/property
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                key-resolver: "#{@userKeyResolver}"
            
    loadbalancer:
      ribbon:
        enabled: false
      # Configuração adicional para ambiente local
      health-check:
        interval: 5s
        timeout: 3s

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://discovery-server:8762/eureka
    # Configurações para ambiente de desenvolvimento
    healthcheck:
      enabled: true
    initial-instance-info-replication-interval-seconds: 5
    registry-fetch-interval-seconds: 5
  instance:
    hostname: localhost
    prefer-ip-address: false
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 15

management:
  endpoints:
    web:
      exposure:
        include: health,info,gateway
  endpoint:
    health:
      show-details: always

logging:
  level:
    org.springframework: DEBUG
    org.springframework.cloud.gateway: TRACE
    reactor.netty: DEBUG
    com.netflix.discovery: DEBUG